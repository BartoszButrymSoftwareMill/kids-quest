---
import DashboardLayout from '../../../layouts/DashboardLayout.astro';
import type { QuestResponse } from '../../../types';
import { AppError } from '../../../lib/errors';

// Authentication is handled by DashboardLayout

const { id } = Astro.params;

// Validate ID
if (!id) {
  throw new AppError(400, 'invalid_id', 'Quest ID is required');
}

// Fetch quest details
let quest: QuestResponse | null = null;
let error: string | null = null;

try {
  const questRes = await fetch(`${Astro.url.origin}/api/quests/${id}`, {
    headers: { Cookie: Astro.request.headers.get('Cookie') || '' },
  });

  if (!questRes.ok) {
    const errorData = await questRes.json().catch(() => ({}));
    if (questRes.status === 404) {
      error = 'Quest nie zosta≈Ç znaleziony';
    } else if (questRes.status === 403) {
      error = 'Nie masz dostƒôpu do tego questa';
    } else {
      error = errorData.message || 'Nie uda≈Ço siƒô pobraƒá questa';
    }
  } else {
    quest = await questRes.json();
  }
} catch (err) {
  console.error('Error fetching quest:', err);
  error = 'WystƒÖpi≈Ç b≈ÇƒÖd podczas pobierania questa';
}

// If error, show error page
if (error || !quest) {
  return Astro.redirect('/dashboard?error=' + encodeURIComponent(error || 'Unknown error'));
}

// Helper function to get status label
function getStatusLabel(status: string): string {
  switch (status) {
    case 'saved':
      return 'Zapisany';
    case 'started':
      return 'W trakcie';
    case 'completed':
      return 'Uko≈Ñczony';
    default:
      return status;
  }
}

// Helper function to get status color
function getStatusColor(status: string): string {
  switch (status) {
    case 'saved':
      return 'bg-blue-100 text-blue-700';
    case 'started':
      return 'bg-green-100 text-green-700';
    case 'completed':
      return 'bg-purple-100 text-purple-700';
    default:
      return 'bg-neutral-100 text-neutral-700';
  }
}

// Helper function to get location label
function getLocationLabel(location: string): string {
  switch (location) {
    case 'home':
      return 'Dom';
    case 'outside':
      return 'Na zewnƒÖtrz';
    default:
      return location;
  }
}

// Helper function to get energy level label
function getEnergyLevelLabel(level: string): string {
  switch (level) {
    case 'low':
      return 'Niska energia';
    case 'medium':
      return '≈örednia energia';
    case 'high':
      return 'Wysoka energia';
    default:
      return level;
  }
}
---

<DashboardLayout title={`${quest.title} | KidsQuest`} description={quest.hook}>
  <div class="container mx-auto px-4">
    <div class="max-w-4xl mx-auto">
      <!-- Back Button -->
      <div class="mb-6">
        <a href="/dashboard" class="inline-flex items-center text-neutral-600 hover:text-neutral-900 transition-colors">
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
          </svg>
          Wr√≥ƒá do listy quest√≥w
        </a>
      </div>

      <!-- Quest Header -->
      <div class="bg-white rounded-lg shadow-md p-8 mb-6">
        <div class="flex items-start justify-between mb-4">
          <h1 class="text-3xl font-bold text-neutral-900">{quest.title}</h1>
          <button
            id="favorite-btn"
            data-quest-id={quest.id}
            data-is-favorite={quest.is_favorite}
            class="text-2xl transition-transform hover:scale-110"
            aria-label={quest.is_favorite ? 'Usu≈Ñ z ulubionych' : 'Dodaj do ulubionych'}
          >
            {quest.is_favorite ? '‚ù§Ô∏è' : 'ü§ç'}
          </button>
        </div>

        <!-- Meta Information -->
        <div class="flex flex-wrap gap-2 mb-6">
          <span class={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(quest.status)}`}>
            {getStatusLabel(quest.status)}
          </span>
          <span class="px-3 py-1 bg-blue-100 text-blue-700 rounded-full text-sm font-medium">
            {quest.age_group.label}
          </span>
          <span class="px-3 py-1 bg-green-100 text-green-700 rounded-full text-sm font-medium">
            {getLocationLabel(quest.location)}
          </span>
          <span class="px-3 py-1 bg-purple-100 text-purple-700 rounded-full text-sm font-medium">
            {quest.duration_minutes} minut
          </span>
          <span class="px-3 py-1 bg-orange-100 text-orange-700 rounded-full text-sm font-medium">
            {getEnergyLevelLabel(quest.energy_level)}
          </span>
        </div>

        <!-- Hook -->
        <div class="mb-6">
          <h2 class="text-xl font-semibold text-neutral-900 mb-3">‚ú® Wprowadzenie</h2>
          <p class="text-neutral-700 text-lg leading-relaxed">{quest.hook}</p>
        </div>
      </div>

      <!-- Steps -->
      <div class="bg-white rounded-lg shadow-md p-8 mb-6">
        <h2 class="text-2xl font-bold text-neutral-900 mb-6">Kroki</h2>

        <div class="space-y-6">
          <!-- Step 1 -->
          <div class="flex gap-4">
            <div
              class="flex-shrink-0 w-8 h-8 bg-blue-600 text-white rounded-full flex items-center justify-center font-bold"
            >
              1
            </div>
            <div class="flex-1">
              <p class="text-neutral-700 leading-relaxed">{quest.step1}</p>
            </div>
          </div>

          <!-- Step 2 -->
          <div class="flex gap-4">
            <div
              class="flex-shrink-0 w-8 h-8 bg-blue-600 text-white rounded-full flex items-center justify-center font-bold"
            >
              2
            </div>
            <div class="flex-1">
              <p class="text-neutral-700 leading-relaxed">{quest.step2}</p>
            </div>
          </div>

          <!-- Step 3 -->
          <div class="flex gap-4">
            <div
              class="flex-shrink-0 w-8 h-8 bg-blue-600 text-white rounded-full flex items-center justify-center font-bold"
            >
              3
            </div>
            <div class="flex-1">
              <p class="text-neutral-700 leading-relaxed">{quest.step3}</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Props -->
      {
        quest.props && quest.props.length > 0 && (
          <div class="bg-white rounded-lg shadow-md p-8 mb-6">
            <h2 class="text-2xl font-bold text-neutral-900 mb-4">Potrzebne rekwizyty</h2>
            <div class="flex flex-wrap gap-2">
              {quest.props.map((prop) => (
                <span class="px-3 py-1 bg-neutral-100 text-neutral-700 rounded-full text-sm font-medium">
                  {prop.label}
                </span>
              ))}
            </div>
          </div>
        )
      }

      <!-- Variations -->
      {
        (quest.easier_version || quest.harder_version) && (
          <div class="bg-white rounded-lg shadow-md p-8 mb-6">
            <h2 class="text-2xl font-bold text-neutral-900 mb-6">Warianty</h2>

            {quest.easier_version && (
              <div class="mb-6 pb-6 border-b border-neutral-200 last:border-0 last:pb-0">
                <h3 class="text-lg font-semibold text-green-700 mb-3">üü¢ ≈Åatwiejsza wersja</h3>
                <p class="text-neutral-700 leading-relaxed">{quest.easier_version}</p>
              </div>
            )}

            {quest.harder_version && (
              <div class="mb-0">
                <h3 class="text-lg font-semibold text-red-700 mb-3">üî¥ Trudniejsza wersja</h3>
                <p class="text-neutral-700 leading-relaxed">{quest.harder_version}</p>
              </div>
            )}
          </div>
        )
      }

      <!-- Safety Notes -->
      {
        quest.safety_notes && (
          <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-6 mb-6">
            <h2 class="text-lg font-semibold text-yellow-900 mb-3 flex items-center gap-2">
              <span>‚ö†Ô∏è</span>
              <span>Uwagi dotyczƒÖce bezpiecze≈Ñstwa</span>
            </h2>
            <p class="text-yellow-800 leading-relaxed">{quest.safety_notes}</p>
          </div>
        )
      }

      <!-- Actions -->
      <div class="bg-white rounded-lg shadow-md p-8">
        <div class="flex flex-col sm:flex-row gap-4">
          {
            quest.status === 'saved' && (
              <button
                id="start-btn"
                data-quest-id={quest.id}
                class="flex-1 px-6 py-3 bg-green-600 text-white rounded-lg font-semibold hover:bg-green-700 transition-colors"
              >
                Rozpocznij quest
              </button>
            )
          }

          {
            quest.status === 'started' && (
              <button
                id="complete-btn"
                data-quest-id={quest.id}
                class="flex-1 px-6 py-3 bg-blue-600 text-white rounded-lg font-semibold hover:bg-blue-700 transition-colors"
              >
                Oznacz jako uko≈Ñczony
              </button>
            )
          }

          {
            quest.status === 'completed' && (
              <button
                id="restart-btn"
                data-quest-id={quest.id}
                class="flex-1 px-6 py-3 bg-purple-600 text-white rounded-lg font-semibold hover:bg-purple-700 transition-colors"
              >
                Rozpocznij ponownie
              </button>
            )
          }

          <button
            id="delete-btn"
            data-quest-id={quest.id}
            class="px-6 py-3 bg-red-600 text-white rounded-lg font-semibold hover:bg-red-700 transition-colors"
          >
            Usu≈Ñ quest
          </button>
        </div>
      </div>
    </div>
  </div>
</DashboardLayout>
<script>
  // Handle favorite toggle
  const favoriteBtn = document.getElementById('favorite-btn');
  if (favoriteBtn) {
    favoriteBtn.addEventListener('click', async () => {
      const questId = favoriteBtn.dataset.questId;
      const isFavorite = favoriteBtn.dataset.isFavorite === 'true';

      try {
        const response = await fetch(`/api/quests/${questId}/favorite`, {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ is_favorite: !isFavorite }),
        });

        if (response.ok) {
          // Update UI
          favoriteBtn.dataset.isFavorite = String(!isFavorite);
          favoriteBtn.textContent = !isFavorite ? '‚ù§Ô∏è' : 'ü§ç';
          favoriteBtn.setAttribute('aria-label', !isFavorite ? 'Usu≈Ñ z ulubionych' : 'Dodaj do ulubionych');
        } else {
          alert('Nie uda≈Ço siƒô zaktualizowaƒá ulubionych');
        }
      } catch (error) {
        console.error('Error toggling favorite:', error);
        alert('WystƒÖpi≈Ç b≈ÇƒÖd');
      }
    });
  }

  // Handle start button
  const startBtn = document.getElementById('start-btn');
  if (startBtn) {
    startBtn.addEventListener('click', async () => {
      const questId = startBtn.dataset.questId;

      try {
        const response = await fetch(`/api/quests/${questId}/start`, {
          method: 'PATCH',
        });

        if (response.ok) {
          window.location.reload();
        } else {
          alert('Nie uda≈Ço siƒô rozpoczƒÖƒá questa');
        }
      } catch (error) {
        console.error('Error starting quest:', error);
        alert('WystƒÖpi≈Ç b≈ÇƒÖd');
      }
    });
  }

  // Handle complete button
  const completeBtn = document.getElementById('complete-btn');
  if (completeBtn) {
    completeBtn.addEventListener('click', async () => {
      const questId = completeBtn.dataset.questId;

      try {
        const response = await fetch(`/api/quests/${questId}/complete`, {
          method: 'PATCH',
        });

        if (response.ok) {
          window.location.reload();
        } else {
          alert('Nie uda≈Ço siƒô oznaczyƒá questa jako uko≈Ñczonego');
        }
      } catch (error) {
        console.error('Error completing quest:', error);
        alert('WystƒÖpi≈Ç b≈ÇƒÖd');
      }
    });
  }

  // Handle restart button
  const restartBtn = document.getElementById('restart-btn');
  if (restartBtn) {
    restartBtn.addEventListener('click', async () => {
      const questId = restartBtn.dataset.questId;

      try {
        const response = await fetch(`/api/quests/${questId}/start`, {
          method: 'PATCH',
        });

        if (response.ok) {
          window.location.reload();
        } else {
          alert('Nie uda≈Ço siƒô ponownie rozpoczƒÖƒá questa');
        }
      } catch (error) {
        console.error('Error restarting quest:', error);
        alert('WystƒÖpi≈Ç b≈ÇƒÖd');
      }
    });
  }

  // Handle delete button
  const deleteBtn = document.getElementById('delete-btn');
  if (deleteBtn) {
    deleteBtn.addEventListener('click', async () => {
      if (!confirm('Czy na pewno chcesz usunƒÖƒá ten quest? Tej operacji nie mo≈ºna cofnƒÖƒá.')) {
        return;
      }

      const questId = deleteBtn.dataset.questId;

      try {
        const response = await fetch(`/api/quests/${questId}`, {
          method: 'DELETE',
        });

        if (response.ok) {
          window.location.href = '/dashboard';
        } else {
          alert('Nie uda≈Ço siƒô usunƒÖƒá questa');
        }
      } catch (error) {
        console.error('Error deleting quest:', error);
        alert('WystƒÖpi≈Ç b≈ÇƒÖd');
      }
    });
  }
</script>
